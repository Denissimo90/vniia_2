// <auto-generated />
using System;
using App.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace App.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("App.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PlaceCode")
                        .HasColumnType("text");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("PlaceName")
                        .HasColumnType("text");

                    b.Property<string>("PositionCode")
                        .HasColumnType("text");

                    b.Property<string>("PositionName")
                        .HasColumnType("text");

                    b.Property<string>("PwdSalt")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BeginDate = new DateTime(2020, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDate = new DateTime(1970, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f69acad0-b97c-4b75-a343-a67deb0393c3",
                            DepartmentCode = "0035",
                            DepartmentId = 4,
                            Email = "Vasya0Pupka@mail.ru",
                            EmailConfirmed = false,
                            EndDate = new DateTime(2022, 5, 23, 15, 40, 48, 279, DateTimeKind.Local).AddTicks(5502),
                            FirstName = "Vasya",
                            LastName = "Pupkin",
                            LockoutEnabled = false,
                            MiddleName = "Vitlievich",
                            PasswordHash = "123456",
                            PersonId = 1,
                            PersonalNumber = "664363",
                            PhoneNumberConfirmed = false,
                            PlaceId = 1,
                            PwdSalt = "sal",
                            SecurityStamp = "93669b1f-9379-4ba0-a261-b2ee0038d67d",
                            TwoFactorEnabled = false,
                            UserName = "nagibator228"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BeginDate = new DateTime(2012, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDate = new DateTime(1960, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "47cd1e19-ad67-45f9-b4e9-33f677e0af91",
                            DepartmentId = 0,
                            Email = "killer@gmail.com",
                            EmailConfirmed = false,
                            EndDate = new DateTime(2022, 5, 23, 15, 40, 48, 280, DateTimeKind.Local).AddTicks(6909),
                            FirstName = "Volodya",
                            LastName = "Putin",
                            LockoutEnabled = false,
                            MiddleName = "Vladimirivich",
                            PasswordHash = "ukrainIsMine",
                            PersonId = 2,
                            PersonalNumber = "44325",
                            PhoneNumberConfirmed = false,
                            PlaceId = 0,
                            PwdSalt = "gg",
                            SecurityStamp = "06075495-6d98-412a-9b4f-dd83aa833c35",
                            TwoFactorEnabled = false,
                            UserName = "VZPutin"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BeginDate = new DateTime(2017, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthDate = new DateTime(1980, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "140d176f-8235-451b-9257-5cf3e0d7f1e8",
                            DepartmentId = 0,
                            Email = "killer@gmail.com",
                            EmailConfirmed = false,
                            EndDate = new DateTime(2022, 5, 23, 15, 40, 48, 280, DateTimeKind.Local).AddTicks(6940),
                            FirstName = "Vlad",
                            LastName = "Vladov",
                            LockoutEnabled = false,
                            MiddleName = "Vladimirivich",
                            PasswordHash = "12345",
                            PersonId = 3,
                            PersonalNumber = "1999",
                            PhoneNumberConfirmed = false,
                            PlaceId = 0,
                            PwdSalt = "hh",
                            SecurityStamp = "f3e5729e-2484-4f99-917b-933dac24e211",
                            TwoFactorEnabled = false,
                            UserName = "Killer"
                        });
                });

            modelBuilder.Entity("App.Entities.Manufacture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<DateTime>("Entered")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufactures");
                });

            modelBuilder.Entity("App.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Articul")
                        .HasColumnType("text");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("ManufactureId")
                        .HasColumnType("integer");

                    b.Property<string>("Measure")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ManufactureId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("App.Entities.ProductQty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductQties");
                });

            modelBuilder.Entity("App.Entities.Product", b =>
                {
                    b.HasOne("App.Entities.Manufacture", "Manufacture")
                        .WithMany("Products")
                        .HasForeignKey("ManufactureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacture");
                });

            modelBuilder.Entity("App.Entities.ProductQty", b =>
                {
                    b.HasOne("App.Entities.Product", "Product")
                        .WithMany("Qties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.Entities.Manufacture", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("App.Entities.Product", b =>
                {
                    b.Navigation("Qties");
                });
#pragma warning restore 612, 618
        }
    }
}
